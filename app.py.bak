#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import uuid
from datetime import datetime
from pathlib import Path
import time


from flask import Flask, request, jsonify, render_template_string, redirect

# ---------------------------
# ΡΥΘΜΙΣΕΙΣ / ΜΟΝΙΜΑ ΜΟΝΟΠΑΤΙΑ
# ---------------------------
BASE_DIR = Path("/opt/raspipush_ultimate")
DATA_DIR = BASE_DIR / "data"
STATIC_DIR = BASE_DIR / "static"
ICONS_DIR = STATIC_DIR / "icons"

DATA_DIR.mkdir(parents=True, exist_ok=True)

LOG_FILE = DATA_DIR / "logs.json"       # λίστα με αποστολές
EVENTS_FILE = DATA_DIR / "events.json"  # dict: {event_id: {...}}

# ---------------------------
# ΠΑΡΟΧΟΣ / ENV VARS
# ---------------------------
# Βάλε τα env πριν τρέξει το service (π.χ. σε /etc/environment ή στο unit file)
# export YUBOTO_API_KEY="...."
# export YUBOTO_SENDER="FDTeam 2012"
# export PUBLIC_BASE_URL="https://app.fdteam2012.gr"

YUBOTO_API_KEY = os.getenv("YUBOTO_API_KEY", "").strip()
YUBOTO_SENDER = os.getenv("YUBOTO_SENDER", "FDTeam 2012").strip()
PUBLIC_BASE_URL = os.getenv("PUBLIC_BASE_URL", "http://127.0.0.1:8899").strip()
YUBOTO_AUTH_HEADER = os.getenv("YUBOTO_AUTH_HEADER", "X-API-KEY").strip()

# Προαιρετικά: αλλάζεις endpoint/headers αν χρειαστεί
YUBOTO_API_URL = os.getenv("YUBOTO_API_URL", "https://api.yuboto.com/v1/sms/send").strip()
# Κάποια APIs θέλουν "X-API-KEY", άλλα "Authorization: Bearer ..."
YUBOTO_AUTH_HEADER = os.getenv("YUBOTO_AUTH_HEADER", "X-API-KEY").strip()  # "X-API-KEY" ή "Authorization"

# ---------------------------
# ΒΟΗΘΗΤΙΚΕΣ ΣΥΝΑΡΤΗΣΕΙΣ
# ---------------------------

def _load_json(path, default):
    try:
        if path.exists():
            with open(path, "r", encoding="utf-8") as f:
                return json.load(f)
    except Exception:
        pass
    return default

def _save_json(path, data):
    tmp = path.with_suffix(".tmp")
    with open(tmp, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    tmp.replace(path)

def now_iso():
    return datetime.now().strftime("%Y-%m-%d %H:%M:%S")

def short_id():
    return uuid.uuid4().hex[:8]

def ensure_events():
    data = _load_json(EVENTS_FILE, {})
    if not isinstance(data, dict):
        data = {}
    return data

def ensure_logs():
    data = _load_json(LOG_FILE, [])
    if not isinstance(data, list):
        data = []
    return data

# ---------------------------
# YUBOTO ΑΠΟΣΤΟΛΗ (SAFE)
# ---------------------------
import requests

def send_sms_yuboto(message, recipients):
    """
    Επιστρέφει (ok: bool, provider_response: dict|str)
    Αν λείπει το API KEY → mock mode (επιστρέφει ok=True αλλά δεν στέλνει).
    """
    if not recipients:
        return False, {"error": "No recipients"}

    # Mock mode όταν δεν έχουμε API key (για να μη σκάει)
    if not YUBOTO_API_KEY:
        return True, {"mock": True, "info": "No YUBOTO_API_KEY. Message not actually sent."}

    headers = {}
    # Αν θες "Authorization: Bearer XXX" βάλε YUBOTO_AUTH_HEADER=Authorization και API_KEY="Bearer XXX"
    if YUBOTO_AUTH_HEADER.lower().startswith("authorization"):
        # θα περιμένει τιμή τύπου "Bearer <TOKEN>"
        headers["Authorization"] = YUBOTO_API_KEY
    else:
        headers[YUBOTO_AUTH_HEADER] = YUBOTO_API_KEY

    payload = {
        "sender": YUBOTO_SENDER,
        "message": message,
        "recipients": recipients
    }

    try:
        resp = requests.post(YUBOTO_API_URL, json=payload, headers=headers, timeout=10)
        ok = (200 <= resp.status_code < 300)
        try:
            data = resp.json()
        except Exception:
            data = {"text": resp.text}
        return ok, {"status_code": resp.status_code, "data": data}
    except Exception as e:
        return False, {"exception": str(e)}

# ---------------------------
# FLASK
# ---------------------------
app = Flask(__name__, static_folder="static", static_url_path="/static")

# ---------------------------
# ΑΡΧΙΚΗ ΣΕΛΙΔΑ (UI)
# ---------------------------
@app.route("/")
def index():
    html = """
    <!DOCTYPE html>
    <html lang="el">
    <head>
        <meta charset="UTF-8">
        <title>RasPi Push Ultimate</title>
        <style>
            body { background-color: #121212; color: #f1f1f1; font-family: Arial, sans-serif; margin: 40px; }
            input, textarea, button { width: 100%; margin: 8px 0; padding: 8px; border-radius: 6px; border: none; }
            input, textarea { background-color: #222; color: #fff; }
            button { background-color: #2196f3; color: #fff; cursor: pointer; }
            button:hover { background-color: #0b7dda; }
            .card { background-color: #1e1e1e; padding: 20px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.5); max-width: 600px; margin: auto; }
            label { font-weight: bold; }
            h2 { color: #03A9F4; }
        </style>
    </head>
    <body>
        <div class="card">
            <h2>Αποστολή SMS (Yuboto)</h2>

            <form id="sendForm" method="post" action="/send">

                <label for="phones">Τηλέφωνο(α):</label>
                <input type="text" id="phones" name="phones" placeholder="π.χ. 6945414565, 6932123456">

                <label for="place">Γήπεδο:</label>
                <input type="text" id="place" name="place" placeholder="π.χ. Δαβουρλής">

                <label for="date">Ημερομηνία:</label>
                <input type="date" id="date" name="date">

                <label for="time">Ώρα:</label>
                <input type="time" id="time" name="time">

                <br>
                <button type="submit">Αποστολή</button>
            </form>
        </div>
    </body>
    </html>
    """
    return html

# ---------------------------
# ΑΠΟΣΤΟΛΗ SMS + ΔΗΜΙΟΥΡΓΙΑ LANDING
# ---------------------------
@app.route("/send", methods=["POST"])
def api_send():
    # Υποστήριξη και για JSON και για φόρμα
    if request.is_json:
        data = request.get_json()
    else:
        data = request.form.to_dict()

    raw_numbers = data.get("phones", "")
    print("🧩 raw_numbers debug:", raw_numbers)

    # Καθαρισμός και μορφοποίηση αριθμών
    numbers = []
    for num in raw_numbers.replace("\n", ",").split(","):
        num = num.strip()
        if num:
            if not num.startswith("+30"):
                if num.startswith("30"):
                    num = "+" + num
                elif num.startswith("0"):
                    num = "+30" + num[1:]
                else:
                    num = "+30" + num
            numbers.append(num)

    if not numbers:
        return jsonify({"error": "No valid numbers"}), 400

    # Δημιουργία μηνύματος
    msg_id = uuid.uuid4().hex[:8]
    message_text = (
        f"Flying Dads Team ⚽\n"
        f"Υπενθύμιση: Παίζουμε στο {data.get('place', 'γήπεδο')} "
        f"την {data.get('date', 'ημερομηνία')} ώρα {data.get('time', 'ώρα')}!\n"
        f"👉 Δες περισσότερα: {PUBLIC_BASE_URL}/r?id={msg_id}"
    )

    # Αποστολή στο Yuboto API
    payload = {
        "sender": YUBOTO_SENDER,
        "message": message_text,
        "recipients": numbers,
    }

    headers = {YUBOTO_AUTH_HEADER: YUBOTO_API_KEY, "Content-Type": "application/json"}

    print("📤 Sending payload:", payload)
    try:
        response = requests.post("https://sms.yuboto.com/api/v2/send",
                                 json=payload, headers=headers, timeout=10)
        provider_response = response.text
        print("✅ provider_response:", provider_response)
    except Exception as e:
        provider_response = str(e)
        print("❌ provider_error:", provider_response)

    # Αποθήκευση στο αρχείο logs
    log_entry = {
        "id": msg_id,
        "phones": numbers,
        "text": message_text,
        "provider_response": provider_response,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
    }

    logs = _load_json(LOG_FILE, [])
    logs.insert(0, log_entry)
    _save_json(LOG_FILE, logs)

    return jsonify({"status": "ok", "msg_id": msg_id})


# ---------------------------
# ΙΣΤΟΡΙΚΟ (JSON)
# ---------------------------
@app.route("/history", methods=["GET"])
def api_history():
    logs = ensure_logs()
    return jsonify(logs)

# ---------------------------
# LANDING PAGE (r?id=<event_id>)
# ---------------------------
@app.route("/r")
def landing():
    event_id = (request.args.get("id") or "").strip()
    events = ensure_events()
    ev = events.get(event_id)

    if not ev:
        return render_template_string("""
<!DOCTYPE html><html lang="el"><meta charset="utf-8">
<title>FDTeam — Δεν βρέθηκε</title>
<body style="background:#0b0f14;color:#e8eef5;font-family:sans-serif;text-align:center;padding:40px">
<h2>⚠️ Δεν βρέθηκε η υπενθύμιση</h2>
<p>Ίσως έχει λήξει ή το link είναι λανθασμένο.</p>
</body></html>
        """)

    html = """
<!DOCTYPE html>
<html lang="el">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>FDTeam — Επιβεβαίωση</title>
<link rel="icon" href="/static/favicon.ico">
<style>
body{ margin:0; background: radial-gradient(900px 400px at 50% -10%, #131a22, #070a0e); color:#e8eef5;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; text-align:center; }
.wrap{ max-width:760px; padding:22px; margin:0 auto; }
.logo{ width:82px; height:82px; object-fit:contain; margin-top:26px; filter: drop-shadow(0 0 12px #ff3b3b99); }
.card{ background:#111821; border:1px solid #000; border-radius:16px; padding:16px; margin:18px 0; box-shadow:0 10px 24px #000c;}
.btn{
  background:#ff3b3b; color:#fff; padding:12px 18px; border:none; border-radius:12px; font-weight:700; cursor:pointer;
  transition:.2s;
}
.btn:hover{ filter:brightness(1.1); box-shadow:0 0 18px #ff3b3b66; }
.msg{ white-space: pre-wrap; text-align:left; background:#0a0f14; border:1px solid #0e1a26; border-radius:14px; padding:12px; }
.small{ color:#9fb3c8; font-size:.9rem;}
.ok{ color:#9ad29a; font-weight:700; }
</style>
</head>
<body>
<div class="wrap">
  <img src="/static/icons/logo_final.png" alt="FDTeam" class="logo">
  <h2>FDTeam — Επιβεβαίωση Λήψης</h2>
  <div class="card">
    <div class="msg">{{message}}</div>
    <p id="seen-status" class="small">Πάτησε «Το είδα» για να καταγραφεί.</p>
    <button class="btn" onclick="markSeen()">✅ Το είδα</button>
  </div>
  <p class="small">© 2025 FDTeam2012</p>
</div>
<script>
async function markSeen(){
  const res = await fetch("/seen",{
    method:"POST",
    headers:{"Content-Type":"application/json"},
    body: JSON.stringify({ id: "{{event_id}}" })
  });
  const data = await res.json();
  document.getElementById("seen-status").innerHTML = data.ok ? "✅ Καταγράφηκε!" : "❌ Αποτυχία.";
}
</script>
</body>
</html>
    """
    # δεν είναι f-string. Ασφαλής αντικατάσταση με render_template_string
    return render_template_string(html, message=ev.get("message",""), event_id=event_id)

# ---------------------------
# ΕΠΙΒΕΒΑΙΩΣΗ «ΤΟ ΕΙΔΑ»
# ---------------------------
@app.route("/seen", methods=["POST"])
def api_seen():
    payload = request.get_json(silent=True) or {}
    event_id = (payload.get("id") or "").strip()
    events = ensure_events()
    ev = events.get(event_id)
    if not ev:
        return jsonify({"ok": False, "error": "not_found"}), 404
    if not ev.get("seen"):
        ev["seen"] = True
        ev["seen_at"] = now_iso()
        _save_json(EVENTS_FILE, events)
    return jsonify({"ok": True})

# ---------------------------
# MAIN (για manual run, σε systemd ήδη ορίζεται ExecStart)
# ---------------------------
if __name__ == "__main__":
    # Σε τοπικό debug: python3 app.py
    app.run(host="0.0.0.0", port=8899)
